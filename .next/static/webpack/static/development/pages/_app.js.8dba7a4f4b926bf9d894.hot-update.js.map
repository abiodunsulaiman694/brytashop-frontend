{"version":3,"file":"static/webpack/static/development/pages/_app.js.8dba7a4f4b926bf9d894.hot-update.js","sources":["webpack:///./components/TakeMyMoneyPaystack.js"],"sourcesContent":["import React from \"react\";\nimport PaystackButton from \"react-paystack\";\nimport { Mutation } from \"react-apollo\";\nimport Router from \"next/router\";\nimport NProgress from \"nprogress\";\nimport PropTypes from \"prop-types\";\nimport gql from \"graphql-tag\";\nimport styled from \"styled-components\";\nimport calcTotalPrice from \"../lib/calcTotalPrice\";\nimport Error from \"./ErrorMessage\";\nimport User, { CURRENT_USER_QUERY } from \"./User\";\n\nconst Pay = styled.div`\n  .payButton {\n    background: #3d7bc9;\n    color: white;\n    font-weight: 500;\n    border: 0;\n    border-radius: 0;\n    text-transform: uppercase;\n    font-size: 2rem;\n    padding: 0.8rem 1.5rem;\n    transform: skew(-2deg);\n    display: inline-block;\n    transition: all 0.5s;\n    &[disabled] {\n      opacity: 0.5;\n    }\n  }\n`;\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation CREATE_ORDER_MUTATION(\n    $reference: String\n    $trans: String\n    $transaction: String\n    $trxref: String\n  ) {\n    createOrderPaystack(\n      reference: $reference\n      trans: $trans\n      transaction: $transaction\n      trxref: $trxref\n    ) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nclass TakeMyMoneyPaystack extends React.Component {\n  onTokenResponse = async (res, createOrderPaystack) => {\n    if (res.status !== \"success\") {\n      return;\n    }\n    NProgress.start();\n    console.log(\"Ontoken paystack called\", res);\n    //manually call the mutation once we have the paystack token\n    const order = await createOrderPaystack({\n      variables: {\n        reference: res.reference,\n        trans: res.trans,\n        transaction: res.transaction,\n        trxref: res.trxref\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n    console.log({ order });\n    return;\n    Router.push({\n      pathname: \"/order\",\n      query: { id: order.data.createOrderPaystack.id }\n    });\n  };\n  close = () => {\n    console.log(\"Payment closed\");\n  };\n  render() {\n    return (\n      <User>\n        {({ data: { me } }) => (\n          <Mutation\n            mutation={CREATE_ORDER_MUTATION}\n            refetchQueries={[\n              {\n                query: CURRENT_USER_QUERY\n              }\n            ]}\n          >\n            {createOrderPaystack => (\n              <Pay>\n                <PaystackButton\n                  text=\"Pay with Paystack\"\n                  currency=\"NGN\"\n                  className=\"payButton\"\n                  callback={res =>\n                    this.onTokenResponse(res, createOrderPaystack)\n                  }\n                  close={this.close}\n                  disabled={false}\n                  embed={false}\n                  email={me.email}\n                  amount={calcTotalPrice(me.cart)}\n                  paystackkey=\"pk_test_cd998cf8585ed603d6ba32e8f9e76e8cb0430c18\"\n                  tag=\"button\"\n                />\n              </Pay>\n            )}\n          </Mutation>\n        )}\n      </User>\n    );\n  }\n}\n\nexport default TakeMyMoneyPaystack;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAmBA;AACA;AAuBA;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAIA;AACA;AACA;AANA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AACA;AAjBA;AAOA;AAUA;AAAA;AAAA;AAjBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAuBA;AACA;AACA;AACA;;;;;;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AADA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AATA;AAgCA;;;;AA/DA;AACA;AAiEA;;;;A","sourceRoot":""}