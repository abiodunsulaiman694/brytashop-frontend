{"version":3,"file":"static/webpack/static/development/pages/_app.js.912474f065bcb2fe9dc6.hot-update.js","sources":["webpack:///./components/TakeMyMoney.js"],"sourcesContent":["import React from \"react\";\nimport StripeCheckout from \"react-stripe-checkout\";\nimport { Mutation } from \"react-apollo\";\nimport Router from \"next/router\";\nimport NProgress from \"nprogress\";\nimport PropTypes from \"prop-types\";\nimport gql from \"graphql-tag\";\nimport calcTotalPrice from \"../lib/calcTotalPrice\";\nimport Error from \"./ErrorMessage\";\nimport User, { CURRENT_USER_QUERY } from \"./User\";\n\nexport const CREATE_ORDER_MUTATION = gql`\n  mutation CREATE_ORDER_MUTATION($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nfunction totalItems(cart) {\n  return cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0);\n}\n\nclass TakeMyMoney extends React.Component {\n  onTokenResponse = async (res, createOrder) => {\n    NProgress.start();\n    console.log(\"Ontoken called\", res);\n    //manually call the mutation once we have the stripe token\n    const order = await createOrder({\n      variables: {\n        token: res.id\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n    console.log({ order });\n    Router.push({\n      pathname: \"/order\",\n      query: { id: order.data.createOrder.id }\n    });\n  };\n  render() {\n    const { children } = this.props;\n    return (\n      <User>\n        {({ data: { me }, loading }) => {\n          if (loading) return null;\n          return (\n            <Mutation\n              mutation={CREATE_ORDER_MUTATION}\n              refetchQueries={[\n                {\n                  query: CURRENT_USER_QUERY\n                }\n              ]}\n            >\n              {createOrder => (\n                <StripeCheckout\n                  amount={calcTotalPrice(me.cart)}\n                  name=\"BrytaShop\"\n                  description={`Order of ${totalItems(me.cart)} items`}\n                  image={\n                    me.cart.length > 0 &&\n                    me.cart[0].item &&\n                    me.cart[0].item.image\n                  }\n                  stripeKey=\"pk_test_RfwBxGBltTB84Zg6BndB4Wvf00ub29j2IS\"\n                  currency=\"NGN\"\n                  email={me.email}\n                  token={res => this.onTokenResponse(res, createOrder)}\n                >\n                  {children}\n                </StripeCheckout>\n              )}\n            </Mutation>\n          );\n        }}\n      </User>\n    );\n  }\n}\n\nexport default TakeMyMoney;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAaA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAKA;AACA;AADA;AADA;AAKA;AACA;AACA;AAXA;AAIA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAFA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;AAgBA;AAAA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AADA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAAA;AAAA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAoBA;AAGA;;;;AAxDA;AACA;AA0DA;;;;A","sourceRoot":""}